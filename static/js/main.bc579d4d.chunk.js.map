{"version":3,"sources":["public/loading.gif","components/iRent.js","components/spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Irent","props","React","useState","coords","setCoords","locatemessage","setLocateMessgae","radius","setRadius","setMap","locSuccess","position","pre","latitude","longitude","locError","initPosition","navigator","geolocation","getCurrentPosition","useEffect","Container","className","Row","lat","toFixed","lng","Col","sm","InputGroup","size","Prepend","Text","id","FormControl","aria-label","aria-describedby","defaultValue","localStorage","getItem","onFocus","event","target","select","Form","Control","as","custom","onChange","e","value","style","width","googleMapsApiKey","mapContainerStyle","height","zoom","onLoad","map","onClick","latLng","toJSON","center","color","margin","Button","variant","authorToken","document","getElementById","setItem","data","setLoadingStatus","fetch","method","body","JSON","stringify","headers","Headers","then","res","json","catch","error","console","response","setStatus","log","startAutoReserve","marginRight","Spinner","opacity","src","LoadingImg","alt","App","status","loadingStatus","init","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc579d4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.7a960949.gif\";","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { GoogleMap, InfoWindow, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\nfunction Irent(props) {\r\n    const [coords, setCoords] = React.useState();\r\n    const [locatemessage, setLocateMessgae] = React.useState();\r\n    const [radius, setRadius] = React.useState(0.5);\r\n    const [map, setMap] = React.useState(null);\r\n\r\n    function locSuccess(position) {\r\n        setCoords(pre => ({ 'lat': position.coords.latitude, 'lng': position.coords.longitude }));\r\n        setLocateMessgae(pre => 'success');\r\n    }\r\n\r\n    function locError() {\r\n        setLocateMessgae(pre => 'error');\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        initPosition()\r\n    }, [])\r\n\r\n    // 自動預約\r\n    function startAutoReserve() {\r\n        let authorToken = document.getElementById('deviceInput').value;\r\n        localStorage.setItem('authorToken', authorToken);\r\n        let data = {\r\n            'authorToken': authorToken,\r\n            'lat': coords.lat,\r\n            'long': coords.lng,\r\n            'radius': radius\r\n        }\r\n\r\n        props.setLoadingStatus(true);\r\n        fetch('https://garyapi.herokuapp.com/autoSearch/', {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify(data), // data can be `string` or {object}!\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        }).then(res => res.json())\r\n            .catch(error => {\r\n                console.error('Error:', error);\r\n                props.setLoadingStatus(false);\r\n            })\r\n            .then(response => {\r\n                props.setStatus('busy');\r\n                props.setLoadingStatus(false);\r\n                console.log('Success:', response)\r\n            });\r\n    }\r\n\r\n    // input全選\r\n    function handleFocus(event) {\r\n        event.target.select();\r\n    }\r\n\r\n    // 回到當前位置\r\n    function initPosition() {\r\n        navigator.geolocation.getCurrentPosition(locSuccess, locError);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                {locatemessage === 'success' ?\r\n                    <Container className=\"maringTop20\">\r\n                        <Row>\r\n                            當前座標\r\n                        </Row>\r\n                        <Row>\r\n                            {'N: ' + coords.lat.toFixed(3) + ', S: ' + coords.lng.toFixed(3)}\r\n                        </Row>\r\n                        <Row className=\"maringTop20\">\r\n                            <Col sm={8}>\r\n                                <InputGroup size=\"lg\" className=\"mb-3\">\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text id=\"inputGroup-sizing-sm\">請輸入AuthorToken</InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <FormControl id=\"deviceInput\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" defaultValue={localStorage.getItem('authorToken')} onFocus={handleFocus} />\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"maringTop20\">\r\n                            <Col sm={8}>\r\n                                <InputGroup size=\"lg\" className=\"mb-3\">\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text>請選擇搜尋半徑(KM)</InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control defaultValue={0.5} as=\"select\" custom onChange={(e) => setRadius(e.target.value)} style={{ width: '30%' }}>\r\n                                        <option>0.3</option>\r\n                                        <option>0.5</option>\r\n                                        <option>0.7</option>\r\n                                        <option>1</option>\r\n                                        <option>1.5</option>\r\n                                        <option>2</option>\r\n                                        <option>100</option>\r\n                                    </Form.Control>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <LoadScript\r\n                                googleMapsApiKey=\"AIzaSyCcLoBWrSwqFI5uxY_8qdhqCkse_QEcRDM\"\r\n                            >\r\n                                <GoogleMap\r\n                                    mapContainerStyle={{ width: '100%', height: '600px' }}\r\n                                    zoom={15}\r\n                                    // Store a reference to the google map instance in state\r\n                                    onLoad={map => setMap(map)}\r\n                                    onClick={e => setCoords(e.latLng.toJSON())}\r\n                                    center={coords}\r\n                                >\r\n                                    <Marker position={coords}>\r\n                                        <InfoWindow >\r\n                                            <div className=\"infoWindow\" style={{ color: 'black' }}>以這裡為基準搜尋</div>\r\n                                        </InfoWindow>\r\n                                    </Marker>\r\n                                </GoogleMap>\r\n                            </LoadScript>\r\n                        </Row>\r\n                        <Row className=\"maringTop20\" style={{ margin: '20px' }}>\r\n                            <Button variant=\"warning\" onClick={() => startAutoReserve()} style={{ marginRight: '20px' }}>啟動自動預約</Button>\r\n                            <Button variant=\"info\" onClick={() => initPosition()}>回到當前位置</Button>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    : <div>無法取得當前位置</div>\r\n                }\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Irent\r\n","import React from \"react\";\r\nimport LoadingImg from '../public/loading.gif';\r\nexport const Spinner = (props) => {\r\n  return (\r\n      <div id=\"loader-wrapper\" style={{ opacity: '0.8' }}>\r\n        <div id=\"loader\"><img src={LoadingImg} alt=\"\" /></div>\r\n        <div className=\"loader-section section-left\"></div>\r\n        <div className=\"loader-section section-right\"></div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './App.css';\r\nimport Irent from './components/iRent';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Spinner from './components/spinner';\r\n\r\nfunction App() {\r\n  const [status, setStatus] = React.useState();\r\n  const [loadingStatus, setLoadingStatus] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    init();\r\n  }, [])\r\n\r\n  function init() {\r\n    setLoadingStatus(true);\r\n    fetch('https://garyapi.herokuapp.com/checkJobExist/')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setLoadingStatus(false);\r\n        setStatus(data.message)\r\n      }).catch(function (response) {\r\n        setStatus('Error');\r\n        setLoadingStatus(false);\r\n        console.log(response);\r\n      })\r\n  }\r\n\r\n  function cancelJob() {\r\n    setLoadingStatus(true);\r\n    fetch('https://garyapi.herokuapp.com/cancelAllJob/')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setLoadingStatus(false);\r\n        if (data.message === 'Success') {\r\n          init();\r\n        }\r\n      }).catch(function (response) {\r\n        setLoadingStatus(false);\r\n        console.error(response);\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {loadingStatus &&\r\n          <Spinner />\r\n        }\r\n        {status === 'free' ?\r\n          <Irent setStatus={(status) => setStatus(status)} setLoadingStatus={(status) => setLoadingStatus(status)} />\r\n          : status === 'busy' ?\r\n            <>\r\n              <span>正在進行自動化預約iRent</span>\r\n              <Button variant=\"danger\" className=\"maringTop20\" onClick={() => cancelJob()}>取消自動化</Button>\r\n            </> \r\n            : null\r\n        }\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}