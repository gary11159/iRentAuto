{"version":3,"sources":["public/loading.gif","components/iRent.js","components/spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Irent","props","React","useState","coords","setCoords","locatemessage","setLocateMessgae","radius","setRadius","setMap","locSuccess","position","pre","latitude","longitude","locError","a","authorToken","document","getElementById","value","localStorage","setItem","setLoadingStatus","fetch","method","body","JSON","stringify","process","headers","Headers","then","res","json","catch","error","console","alert","response","message","startAutoReserve","data","lat","lng","setStatus","log","initPosition","navigator","geolocation","getCurrentPosition","useEffect","Container","Row","toFixed","className","Col","sm","InputGroup","size","Prepend","Text","id","FormControl","aria-label","aria-describedby","defaultValue","getItem","onFocus","event","target","select","Form","Control","as","custom","onChange","e","style","width","googleMapsApiKey","mapContainerStyle","height","zoom","onLoad","map","onClick","latLng","toJSON","center","color","Button","variant","checkToken","marginRight","Spinner","opacity","src","LoadingImg","alt","App","status","loadingStatus","init","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c48d9de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.7a960949.gif\";","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { GoogleMap, InfoWindow, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\nfunction Irent(props) {\r\n    const [coords, setCoords] = React.useState();\r\n    const [locatemessage, setLocateMessgae] = React.useState();\r\n    const [radius, setRadius] = React.useState(0.5);\r\n    const [map, setMap] = React.useState(null);\r\n\r\n    function locSuccess(position) {\r\n        setCoords(pre => ({ 'lat': position.coords.latitude, 'lng': position.coords.longitude }));\r\n        setLocateMessgae(pre => 'success');\r\n    }\r\n\r\n    function locError() {\r\n        setLocateMessgae(pre => 'error');\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        initPosition()\r\n    }, [])\r\n\r\n    // 檢查Token可否使用\r\n    async function checkToken() {\r\n        let authorToken = document.getElementById('deviceInput').value;\r\n        localStorage.setItem('authorToken', authorToken);\r\n        props.setLoadingStatus(true);\r\n        await fetch('https://garyapi.herokuapp.com/checkToken/', {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify({ \"idNo\": process.env.REACT_APP_EX_ID, \"token\": authorToken }), // data can be `string` or {object}!\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        }).then(res => res.json())\r\n            .catch(error => {\r\n                console.error('Error:', error);\r\n                props.setLoadingStatus(false);\r\n                alert(\"無效Token\");\r\n            })\r\n            .then(response => {\r\n                props.setLoadingStatus(false);\r\n                if (response.message === 'Success') {\r\n                    startAutoReserve();\r\n                } else {\r\n                    alert(\"無效Token\");\r\n                }\r\n            });\r\n    }\r\n\r\n    // 自動預約\r\n    function startAutoReserve() {\r\n        let data = {\r\n            'authorToken': localStorage.authorToken,\r\n            'lat': coords.lat,\r\n            'long': coords.lng,\r\n            'radius': radius\r\n        }\r\n\r\n        props.setLoadingStatus(true);\r\n        fetch('https://garyapi.herokuapp.com/autoSearch/', {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify(data), // data can be `string` or {object}!\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        }).then(res => res.json())\r\n            .catch(error => {\r\n                console.error('Error:', error);\r\n                props.setLoadingStatus(false);\r\n            })\r\n            .then(response => {\r\n                props.setStatus('busy');\r\n                props.setLoadingStatus(false);\r\n                console.log('Success:', response)\r\n            });\r\n    }\r\n\r\n    // input全選\r\n    function handleFocus(event) {\r\n        event.target.select();\r\n    }\r\n\r\n    // 回到當前位置\r\n    function initPosition() {\r\n        navigator.geolocation.getCurrentPosition(locSuccess, locError);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                {locatemessage === 'success' ?\r\n                    <Container>\r\n                        <Row>\r\n                            當前座標\r\n                        </Row>\r\n                        <Row>\r\n                            {'N: ' + coords.lat.toFixed(3) + ', S: ' + coords.lng.toFixed(3)}\r\n                        </Row>\r\n                        <Row className=\"maringTop20\">\r\n                            <Col sm={8}>\r\n                                <InputGroup size=\"lg\" className=\"mb-3\">\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text id=\"inputGroup-sizing-sm\">請輸入AuthorToken</InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <FormControl id=\"deviceInput\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" defaultValue={localStorage.getItem('authorToken')} onFocus={handleFocus} />\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"maringTop20\">\r\n                            <Col sm={8}>\r\n                                <InputGroup size=\"lg\" className=\"mb-3\">\r\n                                    <InputGroup.Prepend>\r\n                                        <InputGroup.Text>請選擇搜尋半徑(KM)</InputGroup.Text>\r\n                                    </InputGroup.Prepend>\r\n                                    <Form.Control defaultValue={0.5} as=\"select\" custom onChange={(e) => setRadius(e.target.value)} style={{ width: '30%' }}>\r\n                                        <option>0.3</option>\r\n                                        <option>0.5</option>\r\n                                        <option>0.7</option>\r\n                                        <option>1</option>\r\n                                        <option>1.5</option>\r\n                                        <option>2</option>\r\n                                        <option>100</option>\r\n                                    </Form.Control>\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <LoadScript\r\n                                googleMapsApiKey={process.env.REACT_APP_EX_APIKEY}\r\n                            >\r\n                                <GoogleMap\r\n                                    mapContainerStyle={{ width: '100%', height: '600px' }}\r\n                                    zoom={15}\r\n                                    // Store a reference to the google map instance in state\r\n                                    onLoad={map => setMap(map)}\r\n                                    onClick={e => setCoords(e.latLng.toJSON())}\r\n                                    center={coords}\r\n                                >\r\n                                    <Marker position={coords}>\r\n                                        <InfoWindow >\r\n                                            <div className=\"infoWindow\" style={{ color: 'black' }}>以這裡為基準搜尋</div>\r\n                                        </InfoWindow>\r\n                                    </Marker>\r\n                                </GoogleMap>\r\n                            </LoadScript>\r\n                        </Row>\r\n                        <Row className=\"maringTop20\">\r\n                            <Button variant=\"warning\" onClick={() => checkToken()} style={{ marginRight: '20px' }}>啟動自動預約</Button>\r\n                            <Button variant=\"info\" onClick={() => initPosition()}>回到當前位置</Button>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    : <div>無法取得當前位置</div>\r\n                }\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Irent\r\n","import React from \"react\";\r\nimport LoadingImg from '../public/loading.gif';\r\nexport const Spinner = (props) => {\r\n  return (\r\n      <div id=\"loader-wrapper\" style={{ opacity: '0.8' }}>\r\n        <div id=\"loader\"><img src={LoadingImg} alt=\"\" /></div>\r\n        <div className=\"loader-section section-left\"></div>\r\n        <div className=\"loader-section section-right\"></div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;","import React from 'react';\nimport './App.css';\nimport Irent from './components/iRent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from './components/spinner';\n\nfunction App() {\n  const [status, setStatus] = React.useState();\n  const [loadingStatus, setLoadingStatus] = React.useState(false);\n\n  React.useEffect(() => {\n    init();\n  }, [])\n\n  function init() {\n    setLoadingStatus(true);\n    fetch('https://garyapi.herokuapp.com/checkJobExist/')\n      .then(response => response.json())\n      .then(data => {\n        setLoadingStatus(false);\n        setStatus(data.message)\n      }).catch(function (response) {\n        setStatus('Error');\n        setLoadingStatus(false);\n        console.log(response);\n      })\n  }\n\n  function cancelJob() {\n    setLoadingStatus(true);\n    fetch('https://garyapi.herokuapp.com/cancelAllJob/')\n      .then(response => response.json())\n      .then(data => {\n        setLoadingStatus(false);\n        if (data.message === 'Success') {\n          init();\n        }\n      }).catch(function (response) {\n        setLoadingStatus(false);\n        console.error(response);\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {loadingStatus &&\n          <Spinner />\n        }\n        {status === 'free' ?\n          <Irent setStatus={(status) => setStatus(status)} setLoadingStatus={(status) => setLoadingStatus(status)} />\n          : status === 'busy' ?\n            <>\n              <span>正在進行自動化預約iRent</span>\n              <Button variant=\"danger\" className=\"maringTop20\" onClick={() => cancelJob()}>取消預約？</Button>\n            </> \n            : null\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}