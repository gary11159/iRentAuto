{"version":3,"sources":["components/iRent.js","App.js","serviceWorker.js","index.js"],"names":["Irent","props","React","useState","coords","setCoords","locatemessage","setLocateMessgae","curTab","setCurTab","radius","setRadius","locSuccess","position","pre","latitude","longitude","locError","useEffect","navigator","geolocation","getCurrentPosition","ToggleButtonGroup","type","name","defaultValue","style","width","ToggleButton","value","onClick","Container","className","Row","lat","toFixed","long","Col","sm","InputGroup","size","Prepend","Text","id","FormControl","aria-label","aria-describedby","localStorage","getItem","onFocus","event","target","select","Form","Control","as","custom","onChange","e","Button","variant","authorToken","document","getElementById","setItem","data","fetch","method","body","JSON","stringify","headers","Headers","then","res","json","catch","error","console","response","setStatus","log","startAutoReserve","App","status","init","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73f58b04.chunk.js","sourcesContent":["import React from 'react';\r\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\r\nimport ToggleButton from 'react-bootstrap/ToggleButton';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\n\r\nfunction Irent(props) {\r\n    const [coords, setCoords] = React.useState();\r\n    const [locatemessage, setLocateMessgae] = React.useState();\r\n    const [curTab, setCurTab] = React.useState('cur');\r\n    const [radius, setRadius] = React.useState(0.5);\r\n\r\n    function locSuccess(position) {\r\n        setCoords(pre => ({ 'lat': position.coords.latitude, 'long': position.coords.longitude }));\r\n        setLocateMessgae(pre => 'success');\r\n    }\r\n\r\n    function locError() {\r\n        setLocateMessgae(pre => 'error');\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(locSuccess, locError);\r\n    }, [])\r\n\r\n    // 自動預約\r\n    function startAutoReserve() {\r\n        let authorToken = document.getElementById('deviceInput').value;\r\n        localStorage.setItem('authorToken', authorToken);\r\n        let data = {\r\n            'authorToken': authorToken,\r\n            'lat': coords.lat,\r\n            'long': coords.long,\r\n            'radius': radius\r\n        }\r\n\r\n        fetch('http://127.0.0.1:8000/autoSearch/', {\r\n            method: 'POST', // or 'PUT'\r\n            body: JSON.stringify(data), // data can be `string` or {object}!\r\n            headers: new Headers({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        }).then(res => res.json())\r\n            .catch(error => console.error('Error:', error))\r\n            .then(response => {\r\n                props.setStatus('busy');\r\n                console.log('Success:', response)\r\n            });\r\n    }\r\n\r\n    // input全選\r\n    function handleFocus(event) {\r\n        event.target.select();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={curTab} style={{ width: '70%' }}>\r\n                <ToggleButton value={'cur'} onClick={() => setCurTab('cur')}>當前位置</ToggleButton>\r\n                <ToggleButton value={'specify'} onClick={() => setCurTab('specify')}>指定位置</ToggleButton>\r\n            </ToggleButtonGroup>\r\n            {curTab === 'cur' &&\r\n                <Container className=\"maringTop20\">\r\n                    {locatemessage === 'success' ?\r\n                        <Container>\r\n                            <Row>\r\n                                當前座標\r\n                            </Row>\r\n                            <Row>\r\n                                {'N: ' + coords.lat.toFixed(3) + ', S: ' + coords.long.toFixed(3)}\r\n                            </Row>\r\n                            <Row className=\"maringTop20\">\r\n                                <Col sm={8}>\r\n                                    <InputGroup size=\"lg\" className=\"mb-3\">\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Text id=\"inputGroup-sizing-sm\">請輸入AuthorToken</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <FormControl id=\"deviceInput\" aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" defaultValue={localStorage.getItem('authorToken')} onFocus={handleFocus} />\r\n                                    </InputGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"maringTop20\">\r\n                                <Col sm={8}>\r\n                                    <InputGroup size=\"lg\" className=\"mb-3\">\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Text>請選擇搜尋半徑(KM)</InputGroup.Text>\r\n                                        </InputGroup.Prepend>\r\n                                        <Form.Control defaultValue={0.5} as=\"select\" custom onChange={(e) => setRadius(e.target.value)} style={{ width: '30%' }}>\r\n                                            <option>0.3</option>\r\n                                            <option>0.5</option>\r\n                                            <option>0.7</option>\r\n                                            <option>1</option>\r\n                                            <option>1.5</option>\r\n                                            <option>2</option>\r\n                                            <option>100</option>\r\n                                        </Form.Control>\r\n                                    </InputGroup>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Button variant=\"warning\" className=\"maringTop20\" onClick={() => startAutoReserve()}>啟動自動預約</Button>\r\n                            </Row>\r\n                        </Container>\r\n                        : <div>無法取得當前位置</div>\r\n                    }\r\n                </Container>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Irent\r\n","import React from 'react';\nimport './App.css';\nimport Irent from './components/iRent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\n\nfunction App() {\n  const [status, setStatus] = React.useState();\n\n  React.useEffect(() => {\n    init();\n  }, [])\n\n  function init() {\n    fetch('http://127.0.0.1:8000/checkJobExist/')\n      .then(response => response.json())\n      .then(data => {\n        setStatus(data.message)\n      }).catch(function (response) {\n        console.log(response);\n      })\n  }\n\n  function cancelJob() {\n    fetch('http://127.0.0.1:8000/cancelAllJob/')\n      .then(response => response.json())\n      .then(data => {\n        if ( data.message === 'Success' ) {\n          init();\n        }\n      }).catch(function (response) {\n        console.error(response);\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {status === 'free' ?\n          <Irent setStatus={(status) => setStatus(status)} />\n          :\n          <>\n            <span>正在進行自動化預約iRent</span>\n            <Button variant=\"danger\" className=\"maringTop20\" onClick={() => cancelJob()}>取消預約？</Button>\n          </>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}